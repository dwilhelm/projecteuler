#!/usr/bin/env python
# -*- coding: UTF-8 -*-

"""
Triangle, pentagonal, and hexagonal numbers are generated by the
following formulae:

Triangle        T_(n)=n(n+1)/2      1, 3, 6, 10, 15, ...
Pentagonal      P_(n)=n(3n−1)/2     1, 5, 12, 22, 35, ...
Hexagonal       H_(n)=n(2n−1)       1, 6, 15, 28, 45, ...

It can be verified that T_(285) = P_(165) = H_(143) = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""

def main():
    """Solve with brute force, noting that all hexagonal numbers are
    also triangular.

    For any integer n > 0, 2n - 1 is also an integer > 0 and note that
    H(n) = n(2n-1) = 2n(2n-1)/2 = (2n-1 + 1)(2n-1)/2 = T(2n-1)
    """
    M = 2  # number of sequences of interest
    f = [lambda n: n * (3 * n - 1) / 2, lambda n: n * (2 * n - 1)]
    nums = [0] * M
    #n = [1, 1]
    n = [165, 143]
    for idx in xrange(M):
        n[idx] += 1
        nums[idx] = f[idx](n[idx])
    while min(nums) < max(nums):
        for idx in xrange(M):
            while nums[idx] < max(nums):
                n[idx] += 1
                nums[idx] = f[idx](n[idx])
    print '%s with indices %s' % (nums, n)


if __name__ == '__main__':
    main()

